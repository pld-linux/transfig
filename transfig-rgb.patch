--- transfig.3.2.4/fig2dev/dev/genemf.c.orig	2004-11-30 21:13:50.620043973 +0100
+++ transfig.3.2.4/fig2dev/dev/genemf.c	2004-11-30 22:03:20.245260317 +0100
@@ -100,6 +100,44 @@
 /* Arrows appear this much longer with projected line caps. */
 #define ARROW_EXTRA_LEN(a)	((double)a->ht / (double)a->wid * a->thickness)
 
+static struct  _rgb {
+  float r, g, b;
+}
+stdcols[NUM_STD_COLS] = {     /* standard colors */
+   {0, 0, 0},
+   {0, 0, 1},
+   {0, 1, 0},
+   {0, 1, 1},
+   {1, 0, 0},
+   {1, 0, 1},
+   {1, 1, 0},
+   {1, 1, 1},
+   {0, 0, .56},
+   {0, 0, .69},
+   {0, 0, .82},
+   {.53, .81, 1},
+   {0, .56, 0},
+   {0, .69, 0},
+   {0, .82, 0},
+   {0, .56, .56},
+   {0, .69, .69},
+   {0, .82, .82},
+   {.56, 0, 0},
+   {.69, 0, 0},
+   {.82, 0, 0},
+   {.56, 0, .56},
+   {.69, 0, .69},
+   {.82, 0, .82},
+   {.5, .19, 0},
+   {.63, .25, 0},
+   {.75, .38, 0},
+   {1, .5, .5},
+   {1, .63, .63},
+   {1, .75, .75},
+   {1, .88, .88},
+   {1, .84, 0}
+    };
+
 /* EMF patterns are numbered 1-6 (I use 0 for nonexistant patterns) */
 int emf_map_pattern [22] = { 0, 0, 0, 4,
 			 3, 6, 0, 0,
@@ -1296,6 +1334,34 @@
     fillcolr(FILL_COLOR_INDEX);
 }
 
+/* Looks up RGB color values for color with given index. */
+static void
+getrgb(color, r, g, b)
+    int color;
+    int *r;
+    int *g;
+    int *b;
+{
+  if (color < NUM_STD_COLS) {
+    *r = stdcols[color].r * 255.;
+    *g = stdcols[color].g * 255.;
+    *b = stdcols[color].b * 255.;
+  } else {
+    int i;
+    for (i=0; i<num_usr_cols; i++) {
+      if (color == user_col_indx[i])
+   break;
+    }
+    if (i < num_usr_cols) {
+      *r = user_colors[i].r;
+      *g = user_colors[i].g;
+      *b = user_colors[i].b;
+    } else {
+      fprintf(stderr, "getrgb: color %d is undefined (program error).\n",
+         color);
+    }
+  }
+}
 
 /* Computes and sets fill color for solid filled shapes (fill style 0 to 40). */
 static void fillshade(l)
@@ -1318,13 +1384,13 @@
 	if (l->fill_style == 0) {	/* with fill color */
 	    fillcolr(0);
 	} else if (l->fill_style < 20) {
-	    /*getrgb(l->fill_color, &r, &g, &b);*/
+	    getrgb(l->fill_color, &r, &g, &b);
 	    f = (float)l->fill_style / 20.;
 	    fillcolrgb(round(r * f), round(g * f), round(b * f));
 	} else if (l->fill_style == 20) {
 	    fillcolr(l->fill_color);
 	} else if (l->fill_style < 40) {
-	    /*getrgb(l->fill_color, &r, &g, &b);*/
+	    getrgb(l->fill_color, &r, &g, &b);
 	    f = (float)(l->fill_style - 20) / 20.;
 	    fillcolrgb( round(r + f*(255-r)),
 	    		round(g + f*(255-g)),
